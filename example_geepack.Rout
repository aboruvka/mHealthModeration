
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## demonstrate models for proximal and delayed treatment effects using 'geeglm',
> ## the model fitting function from the contributed 'geepack' R package
> 
> ## load functions needed to generate some data
> system("R CMD SHLIB rsnmm.c")
make: Nothing to be done for `all'.
> dyn.load(if (Sys.info()["sysname"] == "Windows") "rsnmm.dll" else "rsnmm.so")
> library("zoo")

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> source("xzoo.R")
> source("rsnmm.R")
> 
> set.seed(0)
> d <- rsnmm(n = 50, tmax = 200, beta1 = c(-0.1, 0, 0, 0),
+            coef.avail = c(log(9), 0, 0, 0))
> 
> ## define extra variables, using functions from xzoo.R:
> ## - variation among current and up to the past 2 states
> d$varstate <- with(d, roll(id, time, state, width = 3, FUN = var))
> ## - variation up to the past 3 states
> d$lag1varstate <- with(d, delay(id, time, varstate))
> 
> ## nb: for a given row in 'd'...
> ##     'time' indexes the treatment occasion
> ##     'a' is the corresponding treatment indicator
> ##     'y' is the corresponding proximal response
> ##     (this is the same format often used for longitudinal data)
> d <- subset(d, time > 0)
> head(d)
  id time ty tmod tavail tstate      base state a          y        err avail
2  1    1  0    0      0      0 0.6522909    -1 1 -1.6234748 -0.5474850     1
3  1    2  0    0      0      0 0.6522909    -1 0  0.5373703  1.3391751     1
4  1    3  0    0      0      0 0.6522909     1 0  1.2013483  0.3845501     1
5  1    4  0    0      0      0 0.6522909    -1 0 -0.3738786  0.2331138     1
6  1    5  0    0      0      0 0.6522909    -1 1 -0.7032743  0.3417129     1
7  1    6  0    0      0      0 0.6522909     1 0  1.4097941  0.6787916     1
       prob   a.center state.center avail.center one      lag1y      lag2y
2 0.3100255  0.6899745           -1          0.1   1  0.0000000         NA
3 0.1679816 -0.1679816           -1          0.1   1 -1.6234748  0.0000000
4 0.6899745 -0.6899745            1          0.1   1  0.5373703 -1.6234748
5 0.3100255 -0.3100255           -1          0.1   1  1.2013483  0.5373703
6 0.3100255  0.6899745           -1          0.1   1 -0.3738786  1.2013483
7 0.5000000 -0.5000000            1          0.1   1 -0.7032743 -0.3738786
     lag1err lag1avail lag1avail.center lag2avail lag2avail.center lag1a lag2a
2 -0.3975580         0              0.0        NA               NA     0    NA
3 -0.5474850         1              0.1         0              0.0     1     0
4  1.3391751         1              0.1         1              0.1     0     1
5  0.3845501         1              0.1         1              0.1     0     0
6  0.2331138         1              0.1         1              0.1     0     0
7  0.3417129         1              0.1         1              0.1     1     0
   lag1prob  lag2prob lag1a.center lag2a.center lag1tmod lag2tmod lag1state
2 0.0000000        NA    0.0000000           NA        0       NA         0
3 0.3100255 0.0000000    0.6899745    0.0000000        0        0        -1
4 0.1679816 0.3100255   -0.1679816    0.6899745        0        0        -1
5 0.6899745 0.1679816   -0.6899745   -0.1679816        0        0         1
6 0.3100255 0.6899745   -0.3100255   -0.6899745        0        0        -1
7 0.3100255 0.3100255    0.6899745   -0.3100255        0        0        -1
  lag1state.center  varstate lag1varstate
2                0 0.5000000           NA
3               -1 0.3333333    0.5000000
4               -1 1.3333333    0.3333333
5                1 1.3333333    1.3333333
6               -1 1.3333333    1.3333333
7               -1 1.3333333    1.3333333
> 
> ## load functions needed for variance estimation
> library("geepack")
> source("xgeepack.R")
> 
> ## --- treatment model (for the weight denominator)
> 
> ## nb: - weight by availability status so that the variance estimation functions
> ##       can easily recover the estimating function
> ##     - omit earlier observations from the data to avoid using initial values
> ##       in the lagged treatment status ('lag1a')
> ##     - 'geeglm' approach will be very slow for a large number of subjects and
> ##       treatment occasions; in this case use 'glm'/'lm' as follows...
> system.time(fitpd <- geeglm(a ~ lag1a * state, id = id, weights = avail,
+                             family = "binomial", data = d, subset = time > 3,
+                             scale.fix = TRUE))
   user  system elapsed 
  3.387   0.055   4.198 
> summary(fitpd)

Call:
geeglm(formula = a ~ lag1a * state, family = "binomial", data = d, 
    weights = avail, subset = time > 3, id = id, scale.fix = TRUE)

 Coefficients:
            Estimate  Std.err    Wald Pr(>|W|)    
(Intercept)  0.05350  0.03103   2.972   0.0847 .  
lag1a       -0.83606  0.04577 333.650   <2e-16 ***
state        0.79397  0.02739 840.462   <2e-16 ***
lag1a:state  0.03837  0.05133   0.559   0.4547    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation structure = independence 
Scale is fixed.

Number of clusters:   50  Maximum cluster size: 197 
> 
> ## nb: in the 'data' argument, a data frame containing a subject identifer must
> ##     be provided (although it need not be named 'id')
> system.time(fitpd.glm <- glm(a ~ lag1a * state, weights = avail,
+                              family = "binomial", data = d, subset = time > 3))
   user  system elapsed 
  0.016   0.005   0.022 
> 
> ## --- treatment probability model for weight numerator
> 
> fitpn <- geeglm(a ~ 1, id = id, weights = avail, family = "binomial", data = d,
+                 subset = time > 2, scale.fix = TRUE)
> summary(fitpn)

Call:
geeglm(formula = a ~ 1, family = "binomial", data = d, weights = avail, 
    subset = time > 2, id = id, scale.fix = TRUE)

 Coefficients:
            Estimate Std.err Wald Pr(>|W|)    
(Intercept)  -0.2191  0.0206  113   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation structure = independence 
Scale is fixed.

Number of clusters:   50  Maximum cluster size: 198 
> 
> ## --- calculate weights
> 
> d$pd <- d$pn <- NA
> d[rownames(fitpd$fitted.values), "pd"] <- fitpd$fitted.values
> d[rownames(fitpn$fitted.values), "pn"] <- fitpn$fitted.values
> d[d$avail == 0, c("pd", "pn")] <- 0
> d$w <- with(d, ifelse(avail == 0, 0, ifelse(a == 1, pn/pd, (1 - pn)/(1 - pd))))
> d$lag1pd <- with(d, delay(id, time, pd))
> d$lag1pn <- with(d, delay(id, time, pn))
> d$lag1w <- with(d, delay(id, time, w))
> 
> ## --- estimate the proximal treatment effect
> 
> ## nb: - any moderators (like 'state') must be included in the regression model
> ##       via the '*' or ':' *formula* operators
> ##     - omit earlier observations from the data to avoid basing the state
> ##       variance variable on initial values or too few values
> ##     - any observations used to fit the treatment probability model(s), but not
> ##       the proximal response model should correspond to *earlier* treatment
> ##       occasions
> fit1 <- geeglm(y ~ I(time%%2) + varstate + lag1a + state * I(a - pn),
+                id = id, weights = w, data = d, subset = time > 4,
+                scale.fix = TRUE)
> 
> ## adjust variance estimates for estimation of treatment probabilities
> ## nb: - depending on the 'pn' and 'pd' arguments specified, 'vcov' can handle
> ##       any combination of centering and weighting
> ##     - here the 'label' argument is the term label corresponding to the main
> ##       treatment effect
> fit1$vcov <- vcov(fit1, pn = fitpn, pd = fitpd, label = "I(a - pn)")
> 
> ## summarize the model fit
> ## nb: 'estimate' can more generally consider linear combinations of regression
> ##     coefficients, similar to the CONTRAST or ESTIMATE statements in SAS PROC
> ##     GENMOD
> estimate(fit1)
                 Estimate   95% LCL   95% UCL        SE Hotelling p-value    
(Intercept)      0.000351 -0.080117  0.080820  0.039901     0.000 0.99301    
I(time%%2)       0.033185  0.008242  0.058128  0.012368     7.199 0.01031 *  
varstate        -0.000929 -0.050823  0.048965  0.024741     0.001 0.97022    
lag1a           -0.086419 -0.149928 -0.022911  0.031492     7.531 0.00881 ** 
state            0.858799  0.832337  0.885260  0.013121  4283.958 < 1e-04 ***
I(a - pn)       -0.198920 -0.256687 -0.141152  0.028645    48.224 < 1e-04 ***
state:I(a - pn)  0.188144  0.135870  0.240419  0.025921    52.685 < 1e-04 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> estimate(fit1, rbind("Proximal effect in state -1" = c(rep(0, 5), 1, -1),
+                      "Proximal in state 1" = c(rep(0, 5), 1, 1)))
                            Estimate 95% LCL 95% UCL      SE Hotelling p-value
Proximal effect in state -1  -0.3871 -0.4412 -0.3329  0.0432    80.198  <1e-04
Proximal in state 1          -0.0108 -0.0527  0.0311  0.0334     0.104   0.809
                               
Proximal effect in state -1 ***
Proximal in state 1            
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## --- estimate the delayed treatment effect
> 
> fit2 <- geeglm(y ~ I(time%%2) + lag1state + lag1varstate + I(lag1a - lag1pn),
+                weights = lag1w, id = id, data = d, subset = time > 5,
+                scale.fix = TRUE)
> fit2$vcov <- vcov(fit2, pn = fitpn, pd = fitpd, label = "I(lag1a - lag1pn)")
> estimate(fit2)
                   Estimate   95% LCL   95% UCL        SE Hotelling p-value  
(Intercept)        0.022410 -0.078882  0.123702  0.050291     0.199  0.6580  
I(time%%2)        -0.018921 -0.066729  0.028887  0.023736     0.635  0.4296  
lag1state          0.038101  0.003842  0.072361  0.017010     5.017  0.0301 *
lag1varstate       0.021931 -0.038860  0.082722  0.030183     0.528  0.4712  
I(lag1a - lag1pn) -0.075436 -0.151452  0.000579  0.037742     3.995  0.0517 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> proc.time()
   user  system elapsed 
  23.55    1.07   26.38 
